// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings    Booking[]
  reviews     Review[]
  adminLogs   AdminLog[]

  @@map("users")
}

model Tour {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  duration    String
  groupSize   String
  location    String
  price       Float
  rating      Float    @default(0)
  reviews     Int      @default(0)
  image       String
  highlights  String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]
  reviews  Review[]

  @@map("tours")
}

model Hotel {
  id          String   @id @default(cuid())
  name        String
  location    String
  rating      Float
  reviews     Int      @default(0)
  price       Float
  image       String
  description String
  amenities   String[]
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@map("hotels")
}

model Booking {
  id        String        @id @default(cuid())
  userId    String
  tourId    String?
  hotelId   String?
  service   BookingService
  status    BookingStatus @default(PENDING)
  startDate DateTime
  endDate   DateTime?
  guests    Int
  totalPrice Float
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  tour  Tour? @relation(fields: [tourId], references: [id])
  hotel Hotel? @relation(fields: [hotelId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  tourId    String
  rating    Int
  comment   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  tour Tour @relation(fields: [tourId], references: [id])

  @@map("reviews")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  email     String?
  rating    Int
  comment   String
  image     String?
  tourName  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model Staff {
  id        String   @id @default(cuid())
  name      String
  position  String
  email     String?
  phone     String?
  image     String?
  bio       String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff")
}

model SiteContent {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("text")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_content")
}

model AdminLog {
  id        String      @id @default(cuid())
  userId    String
  action    String
  details   String?
  ipAddress String?
  createdAt DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("admin_logs")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

// Enums
enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum BookingService {
  TOUR
  HOTEL
  AIRPORT_TRANSFER
  CUSTOM_ITINERARY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}
